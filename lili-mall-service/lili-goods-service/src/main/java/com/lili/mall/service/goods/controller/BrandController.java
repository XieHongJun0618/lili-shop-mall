package com.lili.mall.service.goods.controller;import com.alibaba.fastjson.JSON;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.lili.mall.api.goods.domain.Brand;import com.lili.mall.common.r.RespResult;import com.lili.mall.service.goods.service.IBrandService;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import java.util.List;/** * * @title BrandController * @description 商品品牌 controller 层 * @author  xiehongjun * @date    15:22 2021/4/18 */@RestController@RequestMapping("/goods")public class BrandController {   private static Logger logger = LoggerFactory.getLogger(BrandController.class);    @Autowired    private IBrandService brandService;    /**     * 列表查询     * @param brand 新增数据     * @return 请求响应     */    @PostMapping("/brand/search")    public RespResult<List<Brand>> search(@RequestBody Brand brand) {        logger.info("BrandController 列表查询数据：{}", JSON.toJSONString(brand));        List<Brand> list = brandService.queryList(brand);        return RespResult.ok(list);    }    /**     * 分页查询     * @param brand 新增数据     * @return 请求响应     */    @PostMapping("/brand/page/{curPage}/{pageSize}")    public RespResult<Page<Brand>> page(@RequestBody Brand brand,        @PathVariable("curPage") Long curPage,        @PathVariable("pageSize") Long pageSize) {        logger.info("BrandController 分页查询数据：{}", JSON.toJSONString(brand));        logger.info("BrandController 分页，curPage：{}，pageSize：{}", curPage, pageSize);        Page<Brand> list = brandService.queryPage(brand, curPage, pageSize);        return RespResult.ok(list);    }    /**     * 新增     * @param brand 新增数据     * @return 请求响应     */    @PostMapping("/brand")    public RespResult add(@RequestBody Brand brand) {        logger.info("BrandController 新增数据：{}", JSON.toJSONString(brand));        brandService.save(brand);        return RespResult.ok();    }    /**     * 更新     * @param brand 更新数据     * @return 请求响应     */    @PutMapping("/brand")    public RespResult update(@RequestBody Brand brand) {        logger.info("BrandController 更新数据：{}", JSON.toJSONString(brand));        brandService.updateById(brand);        return RespResult.ok();    }    /**     * 删除     * @param id 删除数据id     * @return 请求响应     */    @DeleteMapping("/brand/{id}")    public RespResult delete(@PathVariable int id) {        logger.info("BrandController 删除数据：{}", id);        brandService.removeById(id);        return RespResult.ok();    }}